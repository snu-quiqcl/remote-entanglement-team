# -*- coding: utf-8 -*-
"""
Created on Thu Sep 16 20:29:03 2021

@author: QCP32
"""
import sys
from PyQt5.QtCore import QThread
from queue import Queue
import numpy as np
"""
err_codes

0: couldn't open the device.
1: couldn't close the device.
2: Requested to change the setting while running.
3: Requested not availale option.
"""

class CCD_Controller(QThread):
    """
    A dummy/test class to give a guide to make a script.
    The controller class uses QThread class as a base, handling commands and the device is done by QThread.
    This avoids being delayed by the main thread's task.
    
    The logger decorate automatically record the exceptions when a bug happens.
    """
    _num_channel = 0
    _voltage_list = []
    _client_list = []
    _viewer_dict = {} # No compression for 16 bits.
    _status = "standby"
    
    def __init__(self, logger=None, device="Dummy_CCD"):
        super().__init__()
        self.logger = logger
        self.queue = Queue()
        self.device_type = device
        self._readConfig(device)
        self.acq_handler = AcquisitionHandler(self)
        
    def _readConfig(self, device):
        if device == "Dummy_CCD":
            sys.path.append("C:/Users/QCP32/Documents/GitHub/QtDevice_Server/Server/devices/CCD/Dummy/")
            from Dummy_CCD import DummyCCD as CCD
            
        self.ccd = CCD()
        
    
    def logger_decorator(func):
        """
        It writes logs when an exception happens.
        """
        def wrapper(self, *args):
            try:
                func(self, *args)
            except Exception as err:
                if not self.logger == None:
                    self.logger.error("An error ['%s'] occured while handling ['%s']." % (err, func.__name__))
                else:
                    print("An error ['%s'] occured while handling ['%s']." % (err, func.__name__))
        return wrapper
    
    @logger_decorator
    def openDevice(self):
        self.ccd.openDevice()
    
    @logger_decorator
    def closeDevice(self):
        self.ccd.closeDevice()

    @logger_decorator    
    def toWorkList(self, cmd):
        client = cmd[-1]
        if not client in self._client_list:
            self._client_list.append(client)
            
        self.queue.put(cmd)
        if not self.isRunning():
            self.start()
            print("Thread started")

    @logger_decorator          
    def run(self):
        while True:
            work = self.queue.get()
            self._status  = "running"
            # decompose the job
            work_type, command = work[:2]
            client = work[-1]    
    
            if work_type == "C":
                if command == "ON":
                    """
                    When a client is connected, opens the devcie and send voltage data to the client.
                    """
                    print("opening the device")
                    if not self.ccd._is_opened:
                        # Let the cliend know that the device is being initiated.
                        client.toMessageList(["D", "CCD", "INIT", []])
                        self.openDevice()
                        self.acq_handler.start()
                        
                    # Send current settings to the client
                    client.toMessageList(["D", "CCD", "HELO", ["G", self.ccd.gain,              # gain
                                                               "T", self.ccd.exposure_time,     # exposure time
                                                               "M", self.ccd.acquisition_mode]])# mode
                    
                elif command == "OFF":
                    """
                    When a client is disconnected, terminate the client and close the device if no client left.
                    """
                    if client in self._client_list:
                        self._client_list.remove(client)
                    if client in self._viewer_dict.keys():
                        self.toWorkList(["C", "ACQ", [0, 8], client])
                    # When there's no clients connected to the server. close the device.
                    if not len(self._client_list):
                        self.closeDevice()
                        self.toLog("info", "No client is being connected. closing the device.")
                        
                elif command == "ACQ":
                    """
                    It starts acqusition of the CCD when the data is 1. stops whtn it is 0.
                    """
                    run_flag, data_size = work[2]
                    
                    # Stop acqusition
                    if run_flag == 0:
                        if client in self._viewer_dict.keys(): # to avoid unexpected bugs
                            self._viewer_dict.pop(client)
                        if not len(self._viewer_dict):
                            self.stopAcquisition()
                        
                    # Start acquisition
                    else:
                        print(type(data_size))
                        if not (int(data_size) == 8 or int(data_size) == 16):
                            msg = ["D", "CCD", "ERR", ["ACQ", 3]]
                            self.informClients(msg, client)
                        else:
                            self._viewer_dict[client] = data_size
                            if not self.ccd._running_flag:
                                self.ccd.startAcquisition()
                    
                elif command == "SETG":
                    """
                    This sets gain of the CCD
                    """
                    gain = work[2]
                    self.ccd.gain = gain
                    
                    msg = ["D", "CCD", "SETG", [self.ccd.gain]]
                    self.informClients(msg, self._client_list)
                    
                elif command == "SETT":
                    """
                    This sets the exposure time of the CCD
                    """
                    exposure_time = work[2]
                    self.ccd.exposure_time = exposure_time
                    
                    msg = ["D", "CCD", "SETT", [self.ccd.exposure_time]]
                    self.informClients(msg, self._client_list)
                    
                elif command == "SETM":
                    """
                    It sets the acuqisiton mode.
                    Be aware that the CCD should not be running to handle the acqusition mode.
                    """
                    if self.ccd._running_flag:
                        msg = ["D", "CCD", "ERR", ["SETM", 2]]
                        self.informClients(msg, client)
                    else:
                        acquisition_mode = work[2]
                        if not acquisition_mode in self.ccd._avail_acquisition_modes:
                            msg = ["D", "CCD", "ERR", ["SETM", 3]]
                            self.informClients(msg, client)
                        else:
                            self.ccd.acquisition_mode = acquisition_mode
                            
                elif command == "SETC":
                    """
                    It controls the temperature of the EMCCD.
                    """
                    if self.device_type == "ThorCam":
                        msg = ["D", "CCD", "ERR", ["SETC", 3]] # controlling temperature is not available for ThorCam
                        self.informClients(msg, client)
                    else:
                        temp = work[2]
                        self.ccd.setCoolerTarget(temp)
                        msg = ["D", "CCD", "SETC", [self.ccd.target_temperature, self.ccd.temperature]]
                        self.informClients(msg, self._client_list)
                        
                elif command == "COOL":
                    """
                    It turns on and of the cooling
                    """
                    if self.device_type == "ThorCam":
                        msg = ["D", "CCD", "ERR", ["COOL", 3]] # controlling temperature is not available for ThorCam
                        self.informClients(msg, client)
                    else:
                        cooling_flag = work[2]
                        if cooling_flag:
                            self.ccd.coolerOn()
                        else:
                            self.ccd.coolerOff()
                            
                        msg = ["D", "CCD", "COOL", [cooling_flag]]
                        self.informClients(msg, self._client_list)
                
            elif work_type == "Q":
                if command == "RUN":
                    msg = ["D", "CCD", "RUN", [self.ccd._running_flag]]
                    self.informClients(msg, client)
                
                elif command == "SETG":
                    msg = ["D", "CCD", "SETG", [self.ccd.gain]]
                    self.informClients(msg, client)
                    
                elif command == "SETT":
                    msg = ["D", "CCD", "SETT", [self.ccd.exposure_time]]
                    self.informClients(msg, client)

                elif command == "SETM":
                    msg = ["D", "CCD", "SETM", [self.ccd.acquisition_mode]]
                    self.informClients(msg, client)
                    
                elif command == "SETC":
                    msg = ["D", "CCD", "SETC", [self.ccd.target_temperature, self.ccd.temperature]]
                    self.informClients(msg, client)
                    
                        
            else:
                self.toLog("critical", "Unknown work type (\"%s\") has been detected." % work_type)
            self._status = "standby"
            

    @logger_decorator
    def informClients(self, msg, client):
        if type(client) != list:
            client = [client]
        
        self.informing_msg = msg
        for clt in client:
            clt.toMessageList(msg)
            
        print("informing Done!")
         
    def toLog(self, log_type, log_content):
        if not self.logger == None:
            if log_type == "debug":
                self.logger.debug(log_content)
            elif log_type == "info":
                self.logger.info(log_content)
            elif log_type == "warning":
                self.logger.warning(log_content)
            elif log_type == "error":
                self.logger.error(log_content)
            else:
                self.logger.critical(log_content)
        else:
            print(log_type, log_content)


class AcquisitionHandler(QThread):
    
    def __init__(self, parent=None):
        super().__init__()
        self.controller = parent
        self.ccd = parent.ccd
        self.viewer_dict = parent._viewer_dict
        self._acq_event = self.ccd._acq_event
        
    def run(self):
        while True:
            self.ccd._acq_event.wait()
            
            client_8bit_list = []
            client_16bit_list = []
            
            for client, size in self.viewer_dict.items():
                if size == 8:
                    client_8bit_list.append(client)
                elif size == 16:
                    client_16bit_list.append(client)
                    
            buffer_image = np.copy(self.ccd.ccd_image).reshape(-1)
                    
            if len(client_16bit_list):
                msg = ["D", "CCD", "DAT16", buffer_image.tolist()]
                self.controller.informClients(msg, client_16bit_list)
                
            if len(client_8bit_list):
                max_ccd_image = np.amax(buffer_image)
                rescaled_ccd_image = (255*buffer_image/max_ccd_image).astype(np.uint8).tolist() # normalized to 8 bits
                rescaled_ccd_image.append(max_ccd_image) # the max value is attached for reference
                msg = ["D", "CCD", "DAT8", rescaled_ccd_image, max_ccd_image] 
                self.controller.informClients(msg, client_8bit_list)
                
            self.ccd._acq_event.clear()
        
class DummyClient():
    
    def __init__(self):
        pass
    
    def toMessageList(self, msg):
        print(msg)
    